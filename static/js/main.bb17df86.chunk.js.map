{"version":3,"sources":["components/Search.js","components/Result.js","utils/API.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","className","htmlFor","onChange","handleInputChange","name","type","placeholder","id","SearchResults","results","map","result","key","value","alt","src","picture","large","first","last","email","phone","axios","get","SearchResultContainer","state","filtered","searchEmp","term","fuse","Fuse","keys","setState","search","el","item","event","target","API","then","res","data","catch","err","console","log","Search","this","length","Result","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6RAoBeA,MAlBf,SAAoBC,GAClB,OACE,8BACE,yBAAKC,UAAU,cACb,2BAAOC,QAAQ,UAAf,WACA,2BACEC,SAAUH,EAAMI,kBAChBC,KAAK,SACLC,KAAK,OACLL,UAAU,eACVM,YAAY,mDACZC,GAAG,cCIEC,MAff,SAAuBT,GACrB,OACE,wBAAIC,UAAU,6BACXD,EAAMU,QAAQC,KAAI,SAAAC,GAAM,OACvB,wBAAIC,IAAMD,EAAOJ,GAAGM,MAAOb,UAAU,mBACnC,yBAAKc,IAAI,WAAWC,IAAKJ,EAAOK,QAAQC,MAAOjB,UAAU,cACzD,oCACSW,EAAOP,KAAKc,MADrB,IAC6BP,EAAOP,KAAKe,KADzC,aACyDR,EAAOS,MADhE,aACiFT,EAAOU,a,iBCPnF,EACL,WACN,OAAOC,IAAMC,IAAI,kD,QCsDNC,E,4MAjDbC,MAAQ,CACNhB,QAAS,GACTiB,SAAU,I,EASZC,UAAY,SAACC,GACX,IAAMC,EAAO,IAAIC,IAAK,EAAKL,MAAMhB,QAAS,CACxCsB,KAAM,CACJ,aACA,YACA,QACA,WAIJ,EAAKC,SAAS,CACZN,SAAUG,EAAKI,OAAOL,GAAMlB,KAAI,SAAAwB,GAAE,OAAIA,EAAGC,W,EAK7ChC,kBAAoB,SAAAiC,GAClB,IAAMvB,EAAQuB,EAAMC,OAAOxB,MAC3B,EAAKc,UAAUd,I,kEAxBI,IAAD,OAClByB,IACCC,MAAK,SAAAC,GAAG,OAAI,EAAKR,SAAS,CAAEvB,QAAS+B,EAAIC,KAAKhC,aAC9CiC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAyB1B,OACE,6BACE,kBAACG,EAAD,CACE3C,kBAAmB4C,KAAK5C,oBAGxB4C,KAAKtB,MAAMC,SAASsB,OAAS,EACzB,kBAACC,EAAD,CAAYxC,QAASsC,KAAKtB,MAAMC,WAChC,kBAACuB,EAAD,CAAYxC,QAASsC,KAAKtB,MAAMhB,e,GA1CVyC,a,MCArBC,MAJf,WACE,OAAQ,kBAAC,EAAD,O,MCOUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.bb17df86.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction SearchForm(props) {\n  return (\n    <form>\n      <div className=\"form-group\">\n        <label htmlFor=\"search\">Search:</label>\n        <input\n          onChange={props.handleInputChange}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search for an employee by name, email, or phone.\"\n          id=\"search\"\n        />\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\n\nfunction SearchResults(props) {\n  return (\n    <ul className=\"list-group search-results\">\n      {props.results.map(result => (\n        <li key= {result.id.value} className=\"list-group-item\">\n          <img alt=\"employee\" src={result.picture.large} className=\"img-fluid\" />\n          <p>\n            Name: {result.name.first} {result.name.last} | Email: {result.email} | Phone: {result.phone}\n          </p>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default SearchResults;\n","import axios from \"axios\";\n\nexport default {\n  getEmp: function() {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  }\n};","import React, { Component } from \"react\";\nimport SearchForm from \"./Search\";\nimport ResultList from \"./Result\";\nimport API from \"../utils/API\";\nimport Fuse from 'fuse.js'\n\n\n\nclass SearchResultContainer extends Component {\n  state = {\n    results: [],\n    filtered: [],\n  };\n\n  componentDidMount() {\n    API.getEmp()\n    .then(res => this.setState({ results: res.data.results }))\n    .catch(err => console.log(err));\n  }\n\n  searchEmp = (term) => {\n    const fuse = new Fuse(this.state.results, {\n      keys: [\n        'name.first',\n        'name.last',\n        'email',\n        'phone'\n      ]\n    })\n\n    this.setState({\n      filtered: fuse.search(term).map(el => el.item)\n    })\n\n  };\n\n  handleInputChange = event => {\n    const value = event.target.value ;\n    this.searchEmp(value)\n  };\n\n  render() {\n    return (\n      <div>\n        <SearchForm\n          handleInputChange={this.handleInputChange}\n        />\n        {\n          this.state.filtered.length > 0 \n            ? <ResultList results={this.state.filtered} />\n            : <ResultList results={this.state.results} />\n        }\n        \n      </div>\n    );\n  }\n}\n\nexport default SearchResultContainer;\n","import React from 'react';\nimport ResultsContainer from \"./components/Container\"\nimport './App.css';\n\nfunction App() {\n  return  <ResultsContainer />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}